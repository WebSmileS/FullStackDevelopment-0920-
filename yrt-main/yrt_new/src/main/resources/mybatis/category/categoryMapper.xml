<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yrt.project.modular.category.mapper.CategoryMapper">

	<resultMap type="code68" id="code68Result">
		<id     property="code68_sn" column="code68_sn"/>
		<result property="parent_code68_sn" column="parent_code68_sn"/>
		<result property="name" column="name"/>
		<result property="management_type" column="management_type"/>
		<result property="example" column="example"/>
		<result property="is_leaf" column="is_leaf"/>
	</resultMap>
	
	<sql id="selectCode68">
        select code68_sn,  parent_code68_sn, name, management_type, example, 
        	case when code68_sn in (select distinct parent_code68_sn from code68) then 0 else 1 end as is_leaf
		from code68
    </sql>
    
	<select id="selectCode68ById" parameterType="Long" resultMap="code68Result">
		<include refid="selectCode68"/>
		where code68_sn = #{id}
	</select>
	
	<select id="selectCode68ChildrenById" parameterType="Long" resultMap="code68Result">
		<include refid="selectCode68"/>
		where parent_code68_sn = #{id}
	</select>
	
	<select id="selectCode68Mogami"  resultMap="code68Result">
		<include refid="selectCode68"/>
		where parent_code68_sn is null
	</select>
	
	<select id="selectTopLevelCode68List" parameterType="Long" resultMap="code68Result">
		select code68_sn,  parent_code68_sn, name, management_type, example
		from code68
		where parent_code68_sn is null
	</select>
	
	<select id="selectCode68ChildrenByPid" parameterType="Long" resultMap="code68Result">
		select code68_sn,  parent_code68_sn, name, management_type, example
		from code68
		where parent_code68_sn = #{id}
	</select>
	
	<resultMap type="productType" id="productTypeResult">
		<id     property="type_inner_sn" column="type_inner_sn"/>
		<result property="parent_type_inner_sn" column="parent_type_inner_sn"/>
		<result property="type" column="type"/>
		<result property="status" column="status"/>
		<result property="description" column="description"/>
		<result property="is_leaf" column="is_leaf"/>
	</resultMap>
	
	<sql id="selectProductType">
        select type_inner_sn,  parent_type_inner_sn, status, type, description, 
        	case when type_inner_sn in (select distinct parent_type_inner_sn from product_type) then 0 else 1 end as is_leaf
		from product_type
    </sql>
	
	<select id="selectTopLevelProductType" parameterType="map" resultMap="productTypeResult">
		<include refid="selectProductType"/>
		where is_delete = 0 and parent_type_inner_sn is null
		<if test="notall != null ">and status = 1</if>
		<if test="type_inner_sn != null ">and type_inner_sn = #{type_inner_sn}</if>
		<if test="type != null and type != ''">and type  like concat('', #{type}, '')</if>
	</select>
	
	<select id="selectProductTypeInfo" parameterType="map" resultMap="productTypeResult">
		<include refid="selectProductType"/>
		where is_delete = 0 
		<if test="type_inner_sn != null">and type_inner_sn = #{type_inner_sn}</if>
		<if test="type != null and type != ''">and type  like concat('', #{type}, '')</if>
	</select>
	
	<select id="selectProductTypeChildrenList" parameterType="Long" resultMap="productTypeResult">
		<include refid="selectProductType"/>
		where is_delete = 0 and parent_type_inner_sn = #{id}
	</select>
	
	<insert id="insertProductType" parameterType="ProductType" useGeneratedKeys="true" keyProperty="type_inner_sn" keyColumn="type_inner_sn">
		insert into product_type(parent_type_inner_sn, type, description)
        values (#{parent_type_inner_sn}, #{type}, #{description})
	</insert>
	
	<update id="updateProductType" parameterType="ProductType">
        update product_type
        <set>
 			<if test="status != null">status = #{status},</if>
 			<if test="type != null and type != ''">type = #{type},</if>
 			<if test="description != null">description = #{description},</if>
 		</set>
 		where type_inner_sn = #{type_inner_sn}
    </update>
    
    <update id="deleteProductType" parameterType="ProductType">
        update product_type set is_delete = 1
 		where type_inner_sn = #{type_inner_sn}
    </update>
</mapper> 